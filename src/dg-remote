#!/usr/bin/python

#  Copyright 2011, Florent Lamiraux, Duong Dang, CNRS
#
#  This file is part of dynamic-graph-corba.
#  dynamic-graph-corba is free software: you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public License
#  as published by the Free Software Foundation, either version 3 of
#  the License, or (at your option) any later version.
#
#  dynamic-graph-corba is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Lesser Public License for more details.  You should have
#  received a copy of the GNU Lesser General Public License along with
#  dynamic-graph-corba. If not, see <http://www.gnu.org/licenses/>.

# from omniORB import CORBA
# import CosNaming

__version__ = "0.1"

import sys
import code
from code import InteractiveConsole
import sys
from dynamic_graph.corba.dynamicGraph import Interpreter
from omniORB import CORBA
import CosNaming
import readline

context_names = {
    'test':[CosNaming.NameComponent ("dynamic_graph","test"),
                     CosNaming.NameComponent ("python","server")],
    'openhrp':[CosNaming.NameComponent ("openhrp",""),
               CosNaming.NameComponent ("stackOfTasks","")],

    }

class CorbaShell(InteractiveConsole):
    def __init__(self, server = "test"):
        self.cache = ""
        InteractiveConsole.__init__(self)
        self.orb = CORBA.ORB_init (sys.argv, CORBA.ORB_ID)
        self.obj = self.orb.resolve_initial_references("NameService")
        self.rootContext = self.obj._narrow(CosNaming.NamingContext)
        self.server = server
        self.name = context_names[server]
        self.obj = self.rootContext.resolve (self.name)
        self.client = self.obj._narrow(Interpreter)

    def runcode(self, code):
        source = self.cache[:-1]
        if source == "__restart__":
            self.__init__(self.server)
            return
        self.cache = ""
        if source != "":
            try:
                result, output, error = self.client.python(str(source))
                if output != "":
                    print output[:-1]
                if error != "":
                    print error[:-1]
                elif result != "None":
                    print result
            except Exception, e:
                if isinstance(e, CORBA.TRANSIENT):
                    print "CORBA.TRANSIENT exception: Is the server on?"
                    print "Type __restart__ to initialize"
                elif isinstance(e, CORBA.COMM_FAILURE):
                    print "CORBA.COMM_FAILURE exception: Is the server still alive?"
                    print "Type __restart__ to initialize"
                self.showtraceback()

    def push(self,line):
        self.cache += line + "\n"
        return InteractiveConsole.push(self,line)



if __name__ == '__main__':
    import optparse
    parser = optparse.OptionParser(
        usage='\n\t%prog [options]',
        version='%%prog %s' % __version__)
    parser.add_option("-s", "--server",
                      action="store", dest="server", default="test",
                      help="Corba server to be used: 'test' or 'openhrp'")
    (options, args) = parser.parse_args(sys.argv[1:])
    if options.server not in ("test","openhrp"):
        print "Invalid server type."
        parser.print_help()
        sys.exit(0)

    sh = CorbaShell(options.server)

    if args[:]:
        infile = args[0]
        source = open(infile).read()
        result, output, error = sh.client.python(str(source))
        if output != "":
            print output[:-1]
            if error != "":
                print error[:-1]
            elif result != "None":
                print result
    else:        
        sh.interact("Interacting with %s server"%options.server)

